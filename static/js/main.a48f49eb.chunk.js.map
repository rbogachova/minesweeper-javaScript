{"version":3,"sources":["Cell.js","redux/rootReducer.js","redux/actions.js","redux/selectors.js","App.js","index.js"],"names":["boardDimension","mapDispatchToProps","openCell","rowIndex","columnIndex","type","payload","labelCell","connect","state","board","isGameEnded","props","className","cell","isOpen","onClick","onContextMenu","e","preventDefault","bombCount","isBomb","isFlagged","isQuestioned","setupBomb","freeCells","max","randomNumber","length","Math","floor","random","splice","createBoard","gameLevel","defineBoardDimension","push","i","createState","stopwatch","isActive","timerTime","checkCellIsValid","rowLength","columnLength","checkHasBomb","showAllBombs","countCells","cellChecker","map","row","reduce","acc","rowCellCount","calculateNotMinedCells","bombCounter","rowIndexAdjustment","columnIndexAdjustment","calculateBombCount","copyBoard","column","calculateFlaggedCells","flaggedCells","selectBoard","selectNotMinedCells","createSelector","selectFlaggedCells","renderCell","key","uuidv4","renderRow","restartGame","changeGameLevel","notMinedCells","restart","name","id","onChange","target","value","selected","message","closable","store","createStore","action","newBoard","newState","currentCell","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a48f49eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {openCell, labelCell} from './redux/actions';\r\nimport './cell.css';\r\nimport 'antd/dist/antd.css';\r\n\r\nfunction Cell(props) {\r\n    const openCell = () => {\r\n        if (props.cell.isOpen || props.isGameEnded)\r\n            return;\r\n\r\n        props.openCell(props.cell.rowIndex, props.cell.columnIndex);\r\n    };\r\n\r\n    const labelCell = e => {\r\n        e.preventDefault();\r\n        props.labelCell(props.cell.rowIndex, props.cell.columnIndex);\r\n    };\r\n\r\n    const renderCellContent = () => {\r\n        if (!props.cell.isOpen) {\r\n            if (props.cell.isFlagged)\r\n                return '☠️';\r\n            else if (props.cell.isQuestioned)\r\n                return '?';\r\n            else\r\n                return null;\r\n        }\r\n\r\n        if (props.cell.bombCount === 0)\r\n            return null;\r\n\r\n        return props.cell.isBomb\r\n            ? '💣' // TODO: change.\r\n            : props.cell.bombCount;\r\n    };\r\n\r\n    const getCellClass = () =>\r\n        props.cell.isOpen ? \"openCell\" : \"initialCell\";\r\n\r\n    return (\r\n        <span className={getCellClass()}\r\n              onClick={openCell} onContextMenu={labelCell}>\r\n            {renderCellContent()}\r\n        </span>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    board: state.board,\r\n    isGameEnded: state.isGameEnded\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    openCell,\r\n    labelCell\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cell);\r\n","let boardDimension;\r\nexport const easyLevel = 'easy';\r\nexport const mediumLevel = 'medium';\r\nexport const hardLevel = 'hard';\r\n\r\nconst generateRandomNumber = max =>\r\n    Math.floor(Math.random() * max);\r\n\r\nfunction setupBomb(freeCells) {\r\n    let randomNumber = generateRandomNumber(freeCells.length - 1);\r\n    freeCells[randomNumber].isBomb = true;\r\n    freeCells.splice(randomNumber, 1);\r\n}\r\n\r\nfunction defineBoardDimension(gameLevel) {\r\n    switch (gameLevel) {\r\n        case easyLevel:\r\n            return boardDimension = 4;\r\n        case mediumLevel:\r\n            return boardDimension = 6;\r\n        case hardLevel:\r\n            return boardDimension = 10;\r\n    }\r\n}\r\n\r\nfunction createBoard(gameLevel) {\r\n    boardDimension = defineBoardDimension(gameLevel);\r\n\r\n    const board = [];\r\n    const freeCells = [];\r\n\r\n    for (let rowIndex = 0; rowIndex <= boardDimension - 1; rowIndex++) {\r\n        board[rowIndex] = [];\r\n        for (let columnIndex = 0; columnIndex <= boardDimension - 1; columnIndex++) {\r\n            const cell = {\r\n                isBomb: false,\r\n                isOpen: false,\r\n                bombCount: null,\r\n                isFlagged: false,\r\n                isQuestioned: false,\r\n                rowIndex,\r\n                columnIndex\r\n            };\r\n\r\n            board[rowIndex][columnIndex] = cell;\r\n            freeCells.push(cell);\r\n        }\r\n    }\r\n    for (let i = 1; i <= boardDimension; i++)\r\n        setupBomb(freeCells);\r\n\r\n    return board;\r\n}\r\n\r\nconst createState = (gameLevel) => ({\r\n    board: createBoard(gameLevel),\r\n    isGameEnded: false,\r\n    gameLevel,\r\n    stopwatch: {\r\n        isActive: false,\r\n        timerTime: 0\r\n    }\r\n});\r\n\r\nfunction checkCellIsValid(board, rowIndex, columnIndex) {\r\n    const rowLength = board.length;\r\n    const columnLength = board[0].length;\r\n    return rowIndex >= 0 &&\r\n        rowIndex < rowLength &&\r\n        columnIndex >= 0 &&\r\n        columnIndex < columnLength;\r\n}\r\n\r\nfunction checkHasBomb(board, rowIndex, columnIndex) {\r\n    return checkCellIsValid(board, rowIndex, columnIndex) &&\r\n        board[rowIndex][columnIndex].isBomb;\r\n}\r\n\r\nfunction calculateBombCount(board, rowIndex, columnIndex) {\r\n    let bombCounter = 0;\r\n    for (let rowIndexAdjustment = -1; rowIndexAdjustment <= 1; rowIndexAdjustment++) {\r\n        for (let columnIndexAdjustment = -1; columnIndexAdjustment <= 1; columnIndexAdjustment++) {\r\n            if (rowIndexAdjustment === 0 && columnIndexAdjustment === 0)\r\n                continue;\r\n            if (checkHasBomb(board, rowIndex + rowIndexAdjustment, columnIndex + columnIndexAdjustment))\r\n                bombCounter++;\r\n        }\r\n    }\r\n    return bombCounter;\r\n}\r\n\r\nfunction showAllBombs(board) {\r\n    for (let rowIndex = 0; rowIndex < board.length; rowIndex++) {\r\n        for (let columnIndex = 0; columnIndex < board[rowIndex].length; columnIndex++) {\r\n            if (board[rowIndex][columnIndex].isBomb)\r\n                board[rowIndex][columnIndex].isOpen = true;\r\n        }\r\n    }\r\n}\r\n\r\nexport function countCells(board, cellChecker) {\r\n    return board\r\n        .map(row => row.reduce((acc, cell) => cellChecker(cell) ? acc + 1 : acc, 0))\r\n        .reduce((acc, rowCellCount) => acc + rowCellCount);\r\n}\r\n\r\nexport function calculateNotMinedCells(board) {\r\n    const boardDimension = board.length;\r\n    const allCellCount = boardDimension * boardDimension;\r\n    const openNotMinedCellCount = countCells(board, cell => cell.isOpen && !cell.isBomb);\r\n\r\n    return allCellCount - boardDimension - openNotMinedCellCount;\r\n}\r\n\r\nfunction openCell(state, rowIndex, columnIndex) {\r\n    if (!checkCellIsValid(state.board, rowIndex, columnIndex))\r\n        return;\r\n\r\n    const cell = state.board[rowIndex][columnIndex];\r\n    if (cell.isOpen)\r\n        return;\r\n\r\n    cell.isOpen = true;\r\n    if (cell.isBomb) {\r\n        showAllBombs(state.board);\r\n        state.isGameEnded = true;\r\n        return;\r\n    }\r\n\r\n    if (calculateNotMinedCells(state.board) === 0) {\r\n        state.isGameEnded = true;\r\n        return;\r\n    }\r\n\r\n    cell.bombCount = calculateBombCount(state.board, rowIndex, columnIndex);\r\n    if (cell.bombCount !== 0)\r\n        return;\r\n    for (let rowIndexAdjustment = -1; rowIndexAdjustment <= 1; rowIndexAdjustment++) {\r\n        for (let columnIndexAdjustment = -1; columnIndexAdjustment <= 1; columnIndexAdjustment++) {\r\n            if (rowIndexAdjustment === 0 && columnIndexAdjustment === 0)\r\n                continue;\r\n            openCell(state, rowIndex + rowIndexAdjustment, columnIndex + columnIndexAdjustment);\r\n        }\r\n    }\r\n}\r\n\r\nconst copyBoard = board =>\r\n    board.map(row => row.map(column => column));\r\n\r\nexport const calculateFlaggedCells = board =>\r\n    countCells(board, cell => cell.isFlagged);\r\n\r\nfunction labelCell(cell, board) {\r\n    const flaggedCells = calculateFlaggedCells(board);\r\n\r\n    if (cell.isFlagged) {\r\n        cell.isFlagged = false;\r\n        cell.isQuestioned = true;\r\n    } else if (cell.isQuestioned) {\r\n        cell.isQuestioned = false;\r\n    } else if (flaggedCells < boardDimension) {\r\n        cell.isFlagged = true;\r\n    } else if (flaggedCells === boardDimension) {\r\n        cell.isQuestioned = true;\r\n    }\r\n}\r\n\r\nconst updateTimerTime = time => time + 1;\r\n\r\nexport const rootReducer = (state = createState(easyLevel), action) => {\r\n    switch (action.type) {\r\n        case 'OPEN_CELL': {\r\n            const newBoard = copyBoard(state.board);\r\n            const newState = {...state, board: newBoard};\r\n            openCell(newState, action.payload.rowIndex, action.payload.columnIndex);\r\n\r\n            return newState;\r\n        }\r\n\r\n        case 'LABEL_CELL': {\r\n            const newBoard = copyBoard(state.board);\r\n            const currentCell = newBoard[action.payload.rowIndex][action.payload.columnIndex];\r\n            labelCell(currentCell, newBoard);\r\n\r\n            return {...state, board: newBoard};\r\n        }\r\n\r\n        case 'RESTART_GAME': {\r\n            return createState(action.payload.gameLevel);\r\n        }\r\n\r\n        case 'SHOW_ALL_BOMBS': {\r\n            const newBoard = copyBoard(state.board);\r\n            showAllBombs(newBoard);\r\n\r\n            return {...state, board: newBoard};\r\n        }\r\n\r\n        case 'CHANGE_GAME_LEVEL': {\r\n            return createState(action.payload.gameLevel);\r\n        }\r\n    }\r\n    return state;\r\n};\r\n","export const openCell = (rowIndex, columnIndex) => ({\r\n    type: 'OPEN_CELL',\r\n    payload: {\r\n        rowIndex,\r\n        columnIndex\r\n    }\r\n});\r\n\r\nexport const labelCell = (rowIndex, columnIndex) => ({\r\n    type: 'LABEL_CELL',\r\n    payload: {\r\n        rowIndex,\r\n        columnIndex\r\n    }\r\n});\r\n\r\nexport const showAllBombs = () => ({\r\n    type: 'SHOW_ALL_BOMBS',\r\n});\r\n\r\nexport const restartGame = (gameLevel) => ({\r\n    type: 'RESTART_GAME',\r\n    payload: {\r\n        gameLevel\r\n    }\r\n});\r\n\r\nexport const changeGameLevel = (gameLevel) => ({\r\n    type: 'CHANGE_GAME_LEVEL',\r\n    payload: {\r\n        gameLevel\r\n    }\r\n});\r\n","import {createSelector} from 'reselect';\r\nimport {calculateNotMinedCells, calculateFlaggedCells} from './rootReducer';\r\n\r\nconst selectBoard = state => state.board;\r\n\r\nexport const selectNotMinedCells = createSelector(\r\n    [selectBoard],\r\n    calculateNotMinedCells);\r\n\r\nexport const selectFlaggedCells = createSelector(\r\n    [selectBoard],\r\n    calculateFlaggedCells);\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Cell from './Cell';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport {restartGame, showAllBombs, changeGameLevel} from './redux/actions';\r\nimport './app.css';\r\nimport {Alert} from 'antd';\r\nimport {selectFlaggedCells, selectNotMinedCells} from './redux/selectors';\r\nimport {easyLevel, hardLevel, mediumLevel} from './redux/rootReducer';\r\n\r\nconst renderCell = cell =>\r\n    <Cell key={uuidv4()} cell={cell}/>;\r\n\r\nconst renderRow = row =>\r\n    <div key={uuidv4()}>{row.map(renderCell)}</div>;\r\n\r\nfunction App(props) {\r\n    const changeGameLevel = e =>\r\n        props.changeGameLevel(e.target.value);\r\n\r\n    const restart = () =>\r\n        props.restartGame(props.gameLevel);\r\n\r\n    const showAllBombs = () =>\r\n        props.showAllBombs();\r\n\r\n    const showGameOverMessage = () =>\r\n        <Alert message=\"GAME OVER\"\r\n               type=\"error\"\r\n               closable\r\n               onClick={restart}/>;\r\n\r\n    const showCongratulationsMessage = () =>\r\n        <Alert message=\"CONGRATULATIONS! YOU WON!\"\r\n               type=\"success\"\r\n               closable\r\n               onClick={restart}/>;\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <table className=\"center\">\r\n                <tbody>\r\n                <tr>\r\n                    <td>\r\n                        <h1>Minesweeper</h1>\r\n                    </td>\r\n                    <td>\r\n                        <select name=\"levels\" id=\"levels\" onChange={changeGameLevel}>\r\n                            <option value={easyLevel} selected>Easy</option>\r\n                            <option value={mediumLevel}>Medium</option>\r\n                            <option value={hardLevel}>Hard</option>\r\n                        </select>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n            <p>Not Mined Cells: {props.notMinedCells}</p>\r\n            <p> ☠️ ️ Bombs: {props.board.length - props.flaggedCells}</p>\r\n            <button onClick={restart}>Restart</button>\r\n            <button onClick={showAllBombs}>Show All Bombs</button>\r\n            {props.board.map(renderRow)}\r\n            {props.isGameEnded && props.notMinedCells > 0 && showGameOverMessage()}\r\n            {props.notMinedCells === 0 && showCongratulationsMessage()}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    board: state.board,\r\n    isGameEnded: state.isGameEnded,\r\n    notMinedCells: selectNotMinedCells(state),\r\n    flaggedCells: selectFlaggedCells(state),\r\n    gameLevel: state.gameLevel\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    restartGame,\r\n    showAllBombs,\r\n    changeGameLevel\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\nimport {rootReducer} from \"./redux/rootReducer\";\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}